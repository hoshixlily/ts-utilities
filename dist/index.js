(()=>{"use strict";var t={390:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Color=void 0;const n=r(12),o=r(288);class a{constructor(t=0,e=0,r=0,n=1){this.value=0,this.hex="",this.value=(255&n)<<24|(255&t)<<16|(255&e)<<8|(255&r)<<0,this.hex=`#${a.convertNumberToHex(t)}${a.convertNumberToHex(e)}${a.convertNumberToHex(r)}`.toUpperCase(),a.testColorValueRange(t,e,r,n)}static checkHexValidity(t){const e=t.startsWith("#")?t:"#"+t;if(4!==e.length&&7!==e.length)throw new Error("Invalid hex format")}static convertNumberToHex(t){const e=t.toString(16);return 1===e.length?`0${e}`:e}static convertToLongHex(t){const e=t.startsWith("#"),r=e?t.substring(1):t;if(3!==r.length)throw new Error("Invalid hex");const n=`${r.charAt(0).repeat(2)}${r.charAt(1).repeat(2)}${r.charAt(2).repeat(2)}`;return e?`#${n}`:n}static decode(t){const e=n.Integer.decode(t);return new a(e>>16&255,e>>8&255,255&e)}static testColorValueRange(t,e,r,n){let o=!1,a="";if((n<0||n>255)&&(o=!0,a=`${a} Alpha`),(t<0||t>255)&&(o=!0,a=`${a} Red`),(e<0||e>255)&&(o=!0,a=`${a} Green`),(r<0||r>255)&&(o=!0,a=`${a} Blue`),o)throw new Error("Color parameter outside of expected range: "+a)}static createFromHexString(t){a.checkHexValidity(t),t.startsWith("#")||(t="#"+t);const e=7===t.length?t:a.convertToLongHex(t);return a.decode(e)}brighter(){let t=this.getRed(),e=this.getGreen(),r=this.getBlue(),n=this.getAlpha();const o=Math.trunc(1/(1-a.Factor));return 0===t&&0===e&&0===r?new a(o,o,o,n):(t>0&&t<o&&(t=o),e>0&&e<o&&(e=o),r>0&&r<o&&(r=o),new a(Math.min(Math.trunc(t/a.Factor),255),Math.min(Math.trunc(e/a.Factor),255),Math.min(Math.trunc(r/a.Factor),255),n))}darker(){return new a(Math.max(Math.trunc(this.getRed()*a.Factor),0),Math.max(Math.trunc(this.getGreen()*a.Factor),0),Math.max(Math.trunc(this.getBlue()*a.Factor),0),this.getAlpha())}equals(t){return t instanceof a&&t.getRGB()===this.getRGB()}getAlpha(){return this.getRGB()>>24&255}getBlue(){return this.getRGB()>>0&255}getGreen(){return this.getRGB()>>8&255}getHex(){return this.hex}getRed(){return this.getRGB()>>16&255}getRGB(){return this.value}getRGBAComponents(){return new o.RGBA(this.getRed(),this.getGreen(),this.getBlue(),this.getAlpha())}getRGBComponents(){return new o.RGB(this.getRed(),this.getGreen(),this.getBlue())}}e.Color=a,a.Factor=.7,a.Black=new a(0,0,0),a.Blue=new a(0,0,255),a.Cyan=new a(0,255,255),a.DarkGray=new a(64,64,64),a.Gray=new a(128,128,128),a.Green=new a(0,255,0),a.LightGray=new a(192,192,192),a.Magenta=new a(255,0,255),a.Orange=new a(255,200,0),a.Pink=new a(255,175,175),a.Red=new a(255,0,0),a.White=new a(255,255,255),a.Yellow=new a(255,255,0)},499:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ColorUtilities=void 0;const n=r(390);class o{static generateGradientPalette(t,e,r){const o="string"==typeof t?n.Color.createFromHexString(t).getRGBComponents():t.getRGBComponents(),a="string"==typeof e?n.Color.createFromHexString(e).getRGBComponents():e.getRGBComponents();let s=0;const i=[];i.push(e instanceof n.Color?e:n.Color.createFromHexString(e));for(let t=1;t<r-1;++t){s+=1/r;const t=Math.trunc(o.RED*s+(1-s)*a.RED),e=Math.trunc(o.GREEN*s+(1-s)*a.GREEN),u=Math.trunc(o.BLUE*s+(1-s)*a.BLUE),l=new n.Color(t,e,u);i.push(l)}return i.push(t instanceof n.Color?t:n.Color.createFromHexString(t)),i.reverse()}static generateRandomColor(){let t="#";for(let e=0;e<6;e++)t+="0123456789ABCDEF"[Math.floor(16*Math.random())];return n.Color.createFromHexString(t)}static generateRandomColorList(t){const e=[];for(let r=0;r<t;++r)e.push(o.generateRandomColor());return e}}e.ColorUtilities=o},288:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RGBA=e.RGB=void 0;class r{constructor(t,e,r){this.BLUE=0,this.GREEN=0,this.RED=0,this.ensureRGBValueIsInRange(t),this.ensureRGBValueIsInRange(e),this.ensureRGBValueIsInRange(r),this.RED=t,this.GREEN=e,this.BLUE=r}ensureRGBValueIsInRange(t){if(t<0||t>255)throw new Error(`RGB value must be between 0 and 255. Value: ${t}`)}}e.RGB=r,e.RGBA=class extends r{constructor(t,e,r,n){super(t,e,r),this.ALPHA=0,super.ensureRGBValueIsInRange(n),this.ALPHA=n}}},983:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataUtilities=void 0,e.DataUtilities=class{constructor(){}static distinct(t,e,r){null!=e||(e=t=>t),null!=r||(r=(t,e)=>Object.is(t,e));const n=[];for(const o of t){let t=!1;for(const a of n)if(r(e(o),e(a))){t=!0;break}t||n.push(o)}return n}}},12:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Integer=void 0,e.Integer=class{static decode(t){let e,r=10,n=0,o=!1;if(0===t.length)throw new Error("Empty string");const a=t.charAt(0);if("-"===a?(o=!0,n++):"+"===a&&n++,t.startsWith("0x",n)||t.startsWith("0X",n)?(n+=2,r=16):t.startsWith("#")?(n++,r=16):t.startsWith("0",n)&&t.length>1+n&&(n++,r=8),t.startsWith("-",n)||t.startsWith("+",n))throw new Error("Sign character in wrong position");try{e=parseInt(t.substring(n),r),e=o?-e:e}catch(a){const s=o?"-"+t.substring(n):t.substring(n);e=parseInt(s,r)}return e}}},670:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MathUtilities=void 0,e.MathUtilities=class{constructor(){}static degreeToRadian(t){return t*(Math.PI/180)}static radianToDegree(t){return t*(180/Math.PI)}}},126:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.NumberUtilities=void 0;class r{constructor(){}static generateRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1)+t)}static generateRandomNumberList(t,e,n){return[...Array(n)].map((()=>r.generateRandomNumber(t,e)))}static generateUniqueRandomNumberList(t,e,n){if(n>=e-t+1)return[...Array(e-t+1).keys()].map((e=>e+t));const o=[],a={};let s=Math.min(n,e-t+1);for(;s>0;){const n=r.generateRandomNumber(t,e);a[n]||(a[n]=!0,o.push(n),--s)}return o}static isNumeric(t){return!isNaN(parseFloat(t))&&isFinite(t)}static max(t,e){const r=t[Symbol.iterator]();let n,o=r.next();if(o.done)return null;for(n=o.value;!o.done;)e?e(o.value)>e(n)&&(n=o.value):o.value>n&&(n=o.value),o=r.next();return n}static min(t,e){const r=t[Symbol.iterator]();let n,o=r.next();if(o.done)return null;for(n=o.value;!o.done;)e?e(o.value)<e(n)&&(n=o.value):o.value<n&&(n=o.value),o=r.next();return n}}e.NumberUtilities=r},163:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StringUtilities=void 0,e.StringUtilities=class{constructor(){}static generateRandomString(t,e){let r=[];null!=e||(e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");const n=e.length;for(let o=0;o<t;o++)r.push(e.charAt(Math.floor(Math.random()*n)));return r.join("")}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}r(288),r(390),r(499),r(983),r(670),r(126),r(163)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,